<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/cache" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">
    <!--开启组件扫描-->
    <context:component-scan base-package="com.xiaoqi"/>
    <!--引入外部资源文件-->
    <context:property-placeholder location="classpath:dbcp.properties"/>
    <!--1.声明数据源-->
    <bean class="com.alibaba.druid.pool.DruidDataSource" id="dataSource" init-method="init" destroy-method="close">
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="maxActive" value="${jdbc.max}"/>
    </bean>

    <!--2.声明SqlSessionFactoryBean类，这个类内部创建SqlSessionFactory对象的-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--指定mybatis的连接的数据源信息-->
        <property name="dataSource" ref="dataSource"/>
        <!--指定mybatis主配置文件-->
        <property name="configLocation" value="classpath:mybatis.xml"/>
    </bean>


    <!--3.创建dao类对象，使用sqlSession对象的getMapper（）方法
            MapperScannerConfigurer类:在内部调用getMapper方法生成每个dao接口的对象
        -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">

        <!--指定sqlSessionFactory对象的id-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!--
        指定包名，包名是dao接口所在的包名
        MapperScannerConfigurer类：会扫描指定包中的所有接口，把每个接口都执行
            一次getMapper()方法，得到每个接口的dao对象。
            创建好的dao对象放入到spring的容器中
        -->
        <property name="basePackage" value="com.xiaoqi.dao"/>
    </bean>

    <!--
       1. 创建事务管理器
    -->
    <bean class="org.springframework.jdbc.datasource.DataSourceTransactionManager" id="transactionManager">
        <!--注入数据源-->
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--2.配置通知-->
<!--    <tx:advice id="myadvice">-->
<!--        &lt;!&ndash;配置事务参数&ndash;&gt;-->
<!--        <tx:attributes>-->
<!--            &lt;!&ndash;-->
<!--                配置指定那种规则的方法上边添加事务-->
<!--            &ndash;&gt;-->
<!--            <tx:method name="" propartation="REQUIRED" isolocation="REPEATABLE READ"/>-->
<!--        </tx:attributes>-->
<!--    </tx:advice>-->

<!--    &lt;!&ndash;3.配置切入点和切面&ndash;&gt;-->
<!--    <aop:config>-->
<!--        &lt;!&ndash;配置切入点&ndash;&gt;-->
<!--        <aop:pointcut id="pt" expression="execution(* com.xiaoqi.dao.*(..))"/>-->
<!--        &lt;!&ndash;配置切面&ndash;&gt;-->
<!--        <aop:advisor advice-ref="myadvice" pointcut-ref="pt"/>-->
<!--    </aop:config> -->


</beans>